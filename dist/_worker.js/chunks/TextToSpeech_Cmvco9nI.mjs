globalThis.process ??= {}; globalThis.process.env ??= {};
import { b as createAstro, c as createComponent, a as renderTemplate, t as defineScriptVars, v as maybeRenderHead, d as addAttribute } from './astro/server_Dwc-Xb_E.mjs';
import { t } from './Footer_DqNLYxEy.mjs';
/* empty css                         */

var __freeze$2 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", { value: __freeze$2(raw || cooked.slice()) }));
var _a$2;
const $$Astro$2 = createAstro("https://techoxium.com");
const $$BlogComment = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$BlogComment;
  const { locale = "tr" } = Astro2.props;
  return renderTemplate(_a$2 || (_a$2 = __template$2(["", '<div class="comments-container" data-astro-cid-gnqjjjbo> <button class="comment-toggle" id="comment-toggle" type="button" aria-expanded="false" data-astro-cid-gnqjjjbo> <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" data-astro-cid-gnqjjjbo> <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" data-astro-cid-gnqjjjbo></path> </svg> <span id="toggle-text" data-astro-cid-gnqjjjbo>', '</span> <svg class="chevron" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" data-astro-cid-gnqjjjbo> <path d="M6 9l6 6 6-6" data-astro-cid-gnqjjjbo></path> </svg> </button> <div class="comments-section" id="comments-section" data-astro-cid-gnqjjjbo> <div id="disqus_thread" data-astro-cid-gnqjjjbo></div> </div> </div>  <script>(function(){', "\n  const toggle = document.getElementById('comment-toggle');\n  const section = document.getElementById('comments-section');\n  const toggleText = document.getElementById('toggle-text');\n  \n  let commentsLoaded = false;\n  let isVisible = false;\n  \n  function loadDisqus() {\n    if (commentsLoaded) return;\n    \n    // Clear any existing Disqus elements\n    const thread = document.getElementById('disqus_thread');\n    if (thread) {\n      thread.innerHTML = '';\n    }\n    \n    // Reset Disqus if it was loaded before\n    if (window.DISQUS) {\n      window.DISQUS.reset({\n        reload: true,\n        config: function () {\n          this.page.identifier = window.location.pathname;\n          this.page.url = window.location.href;\n          this.page.title = document.title;\n        }\n      });\n      commentsLoaded = true;\n      return;\n    }\n    \n    const disqusShortname = 'tekhaza';\n    \n    // Set global Disqus configuration\n    window.disqus_config = function() {\n      this.page.url = window.location.href;\n      this.page.identifier = window.location.pathname;\n      this.page.title = document.title;\n    };\n    \n    // Create and load the Disqus script\n    const script = document.createElement('script');\n    script.src = `https://${disqusShortname}.disqus.com/embed.js`;\n    script.setAttribute('data-timestamp', String(Date.now()));\n    script.async = true;\n    \n    script.onload = () => {\n      console.log('Disqus loaded successfully');\n      commentsLoaded = true;\n    };\n    \n    script.onerror = () => {\n      console.error('Failed to load Disqus');\n      const thread = document.getElementById('disqus_thread');\n      if (thread) {\n        thread.innerHTML = `<p style=\"text-align: center; color: var(--gray);\">${loadFailedText}</p>`;\n      }\n    };\n    \n    (document.head || document.body).appendChild(script);\n  }\n  \n  function toggleComments() {\n    isVisible = !isVisible;\n    \n    toggle.classList.toggle('active', isVisible);\n    section.classList.toggle('show', isVisible);\n    toggle.setAttribute('aria-expanded', String(isVisible));\n    \n    toggleText.textContent = isVisible ? hideCommentsText : showCommentsText;\n    \n    if (isVisible && !commentsLoaded) {\n      // Small delay to allow the animation to start\n      setTimeout(loadDisqus, 100);\n    }\n  }\n  \n  toggle.addEventListener('click', toggleComments);\n  \n  // Intersection Observer for performance\n  const observer = new IntersectionObserver((entries) => {\n    if (entries[0].isIntersecting && !commentsLoaded && isVisible) {\n      loadDisqus();\n      observer.disconnect();\n    }\n  });\n  \n  observer.observe(section);\n})();<\/script>"], ["", '<div class="comments-container" data-astro-cid-gnqjjjbo> <button class="comment-toggle" id="comment-toggle" type="button" aria-expanded="false" data-astro-cid-gnqjjjbo> <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" data-astro-cid-gnqjjjbo> <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" data-astro-cid-gnqjjjbo></path> </svg> <span id="toggle-text" data-astro-cid-gnqjjjbo>', '</span> <svg class="chevron" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" data-astro-cid-gnqjjjbo> <path d="M6 9l6 6 6-6" data-astro-cid-gnqjjjbo></path> </svg> </button> <div class="comments-section" id="comments-section" data-astro-cid-gnqjjjbo> <div id="disqus_thread" data-astro-cid-gnqjjjbo></div> </div> </div>  <script>(function(){', "\n  const toggle = document.getElementById('comment-toggle');\n  const section = document.getElementById('comments-section');\n  const toggleText = document.getElementById('toggle-text');\n  \n  let commentsLoaded = false;\n  let isVisible = false;\n  \n  function loadDisqus() {\n    if (commentsLoaded) return;\n    \n    // Clear any existing Disqus elements\n    const thread = document.getElementById('disqus_thread');\n    if (thread) {\n      thread.innerHTML = '';\n    }\n    \n    // Reset Disqus if it was loaded before\n    if (window.DISQUS) {\n      window.DISQUS.reset({\n        reload: true,\n        config: function () {\n          this.page.identifier = window.location.pathname;\n          this.page.url = window.location.href;\n          this.page.title = document.title;\n        }\n      });\n      commentsLoaded = true;\n      return;\n    }\n    \n    const disqusShortname = 'tekhaza';\n    \n    // Set global Disqus configuration\n    window.disqus_config = function() {\n      this.page.url = window.location.href;\n      this.page.identifier = window.location.pathname;\n      this.page.title = document.title;\n    };\n    \n    // Create and load the Disqus script\n    const script = document.createElement('script');\n    script.src = \\`https://\\${disqusShortname}.disqus.com/embed.js\\`;\n    script.setAttribute('data-timestamp', String(Date.now()));\n    script.async = true;\n    \n    script.onload = () => {\n      console.log('Disqus loaded successfully');\n      commentsLoaded = true;\n    };\n    \n    script.onerror = () => {\n      console.error('Failed to load Disqus');\n      const thread = document.getElementById('disqus_thread');\n      if (thread) {\n        thread.innerHTML = \\`<p style=\"text-align: center; color: var(--gray);\">\\${loadFailedText}</p>\\`;\n      }\n    };\n    \n    (document.head || document.body).appendChild(script);\n  }\n  \n  function toggleComments() {\n    isVisible = !isVisible;\n    \n    toggle.classList.toggle('active', isVisible);\n    section.classList.toggle('show', isVisible);\n    toggle.setAttribute('aria-expanded', String(isVisible));\n    \n    toggleText.textContent = isVisible ? hideCommentsText : showCommentsText;\n    \n    if (isVisible && !commentsLoaded) {\n      // Small delay to allow the animation to start\n      setTimeout(loadDisqus, 100);\n    }\n  }\n  \n  toggle.addEventListener('click', toggleComments);\n  \n  // Intersection Observer for performance\n  const observer = new IntersectionObserver((entries) => {\n    if (entries[0].isIntersecting && !commentsLoaded && isVisible) {\n      loadDisqus();\n      observer.disconnect();\n    }\n  });\n  \n  observer.observe(section);\n})();<\/script>"])), maybeRenderHead(), t(locale, "blog.showComments"), defineScriptVars({ locale, showCommentsText: t(locale, "blog.showComments"), hideCommentsText: t(locale, "blog.hideComments"), loadFailedText: locale === "en" ? "Comments failed to load. Please refresh the page." : "Yorumlar y\xFCklenemedi. L\xFCtfen sayfay\u0131 yenileyin." }));
}, "/Users/mac/Desktop/techoxium/src/components/BlogComment.astro", void 0);

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro("https://techoxium.com");
const $$FontSizeControl = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$FontSizeControl;
  const { locale = "tr" } = Astro2.props;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<div class="font-size-controls" data-astro-cid-ahgcjadl> <button id="decrease-font"', "", ' data-astro-cid-ahgcjadl> <span class="font-icon small" data-astro-cid-ahgcjadl>A</span> </button> <button id="increase-font"', "", ' data-astro-cid-ahgcjadl> <span class="font-icon large" data-astro-cid-ahgcjadl>A</span> </button> </div>  <script>(function(){', "\n  const decreaseBtn = document.getElementById('decrease-font');\n  const increaseBtn = document.getElementById('increase-font');\n  \n  // Font size levels\n  const fontSizes = ['small', 'medium', 'large'];\n  let currentSize = localStorage.getItem('fontSize') || 'medium';\n  \n  // Apply saved font size on load\n  document.documentElement.setAttribute('data-font-size', currentSize);\n  \n  function updateFontSize(size) {\n    currentSize = size;\n    document.documentElement.setAttribute('data-font-size', size);\n    localStorage.setItem('fontSize', size);\n    \n    // Update button states\n    decreaseBtn.disabled = size === 'small';\n    increaseBtn.disabled = size === 'large';\n  }\n  \n  decreaseBtn.addEventListener('click', () => {\n    const currentIndex = fontSizes.indexOf(currentSize);\n    if (currentIndex > 0) {\n      updateFontSize(fontSizes[currentIndex - 1]);\n    }\n  });\n  \n  increaseBtn.addEventListener('click', () => {\n    const currentIndex = fontSizes.indexOf(currentSize);\n    if (currentIndex < fontSizes.length - 1) {\n      updateFontSize(fontSizes[currentIndex + 1]);\n    }\n  });\n  \n  // Initialize button states\n  updateFontSize(currentSize);\n})();<\/script>"])), maybeRenderHead(), addAttribute(t(locale, "accessibility.decreaseFontSize"), "aria-label"), addAttribute(t(locale, "accessibility.decreaseFontSize"), "title"), addAttribute(t(locale, "accessibility.increaseFontSize"), "aria-label"), addAttribute(t(locale, "accessibility.increaseFontSize"), "title"), defineScriptVars({ locale }));
}, "/Users/mac/Desktop/techoxium/src/components/FontSizeControl.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://techoxium.com");
const $$TextToSpeech = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$TextToSpeech;
  const { locale = "tr" } = Astro2.props;
  return renderTemplate(_a || (_a = __template(["", '<div class="text-to-speech-controls" data-astro-cid-titvx7xv> <button id="tts-toggle"', "", ' data-astro-cid-titvx7xv> <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" id="play-icon" data-astro-cid-titvx7xv> <path d="M8 5v14l11-7z" data-astro-cid-titvx7xv></path> </svg> <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" id="stop-icon" style="display: none;" data-astro-cid-titvx7xv> <path d="M6 6h12v12H6z" data-astro-cid-titvx7xv></path> </svg> <span id="tts-text" data-astro-cid-titvx7xv>', '</span> </button> <div class="tts-progress" data-astro-cid-titvx7xv> <div class="tts-progress-bar" id="tts-progress-bar" data-astro-cid-titvx7xv></div> </div> </div>  <script>(function(){', "\n  class TextToSpeech {\n    constructor() {\n      this.synth = window.speechSynthesis;\n      this.utterance = null;\n      this.isPlaying = false;\n      this.currentIndex = 0;\n      this.textElements = [];\n      \n      this.toggleBtn = document.getElementById('tts-toggle');\n      this.playIcon = document.getElementById('play-icon');\n      this.stopIcon = document.getElementById('stop-icon');\n      this.ttsText = document.getElementById('tts-text');\n      this.progressBar = document.getElementById('tts-progress-bar');\n      \n      this.init();\n    }\n    \n    init() {\n      // Get all text content from the blog post\n      this.collectTextElements();\n      \n      // Event listeners\n      this.toggleBtn?.addEventListener('click', () => this.toggle());\n      \n      // Check if speech synthesis is supported\n      if (!this.synth) {\n        console.warn('Speech synthesis not supported');\n        this.toggleBtn.disabled = true;\n      }\n    }\n    \n    collectTextElements() {\n      const article = document.querySelector('article, .prose, .blog-content');\n      if (!article) return;\n      \n      // Get all text nodes (p, h1, h2, h3, li, etc.)\n      const selectors = 'h1, h2, h3, h4, h5, h6, p, li';\n      this.textElements = Array.from(article.querySelectorAll(selectors))\n        .filter(el => el.textContent.trim().length > 0);\n    }\n    \n    createUtterance(text) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      \n      // Set language based on locale\n      utterance.lang = locale === 'en' ? 'en-US' : 'tr-TR';\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n      \n      // Find appropriate voice\n      const voices = this.synth.getVoices();\n      const preferredVoice = voices.find(voice => \n        voice.lang.startsWith(locale === 'en' ? 'en' : 'tr')\n      );\n      \n      if (preferredVoice) {\n        utterance.voice = preferredVoice;\n      }\n      \n      return utterance;\n    }\n    \n    toggle() {\n      if (this.isPlaying) {\n        this.stop();\n      } else {\n        this.play();\n      }\n    }\n    \n    play() {\n      if (this.isPlaying) return;\n      \n      // Get all text content\n      const allText = this.textElements\n        .map(el => el.textContent.trim())\n        .join('. ');\n      \n      if (!allText) return;\n      \n      this.utterance = this.createUtterance(allText);\n      \n      // Event handlers\n      this.utterance.onstart = () => {\n        this.isPlaying = true;\n        this.updateUI('playing');\n        this.highlightCurrentText();\n      };\n      \n      this.utterance.onend = () => {\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        this.updateUI('stopped');\n        this.clearHighlights();\n        this.updateProgress(0);\n      };\n      \n      this.utterance.onboundary = (event) => {\n        if (event.name === 'word') {\n          this.updateProgress(event.charIndex / allText.length * 100);\n        }\n      };\n      \n      this.synth.speak(this.utterance);\n    }\n    \n    stop() {\n      this.synth.cancel();\n      this.isPlaying = false;\n      this.currentIndex = 0;\n      this.updateUI('stopped');\n      this.clearHighlights();\n      this.updateProgress(0);\n    }\n    \n    updateUI(state) {\n      const playText = locale === 'en' ? 'Play Audio' : 'Sesli Oku';\n      const stopText = locale === 'en' ? 'Stop Audio' : 'Durdur';\n      \n      if (state === 'playing') {\n        this.playIcon.style.display = 'none';\n        this.stopIcon.style.display = 'block';\n        this.ttsText.textContent = stopText;\n        this.toggleBtn.setAttribute('aria-label', stopText);\n        this.toggleBtn.setAttribute('title', stopText);\n      } else {\n        this.playIcon.style.display = 'block';\n        this.stopIcon.style.display = 'none';\n        this.ttsText.textContent = playText;\n        this.toggleBtn.setAttribute('aria-label', playText);\n        this.toggleBtn.setAttribute('title', playText);\n      }\n    }\n    \n    updateProgress(percentage) {\n      if (this.progressBar) {\n        this.progressBar.style.width = `${percentage}%`;\n      }\n    }\n    \n    highlightCurrentText() {\n      // Simple highlighting - could be enhanced\n      this.textElements.forEach((el, index) => {\n        if (index === this.currentIndex) {\n          el.classList.add('tts-current-text');\n        }\n      });\n    }\n    \n    clearHighlights() {\n      this.textElements.forEach(el => {\n        el.classList.remove('tts-current-text');\n      });\n    }\n  }\n  \n  // Initialize when DOM is loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => new TextToSpeech());\n  } else {\n    new TextToSpeech();\n  }\n})();<\/script>"], ["", '<div class="text-to-speech-controls" data-astro-cid-titvx7xv> <button id="tts-toggle"', "", ' data-astro-cid-titvx7xv> <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" id="play-icon" data-astro-cid-titvx7xv> <path d="M8 5v14l11-7z" data-astro-cid-titvx7xv></path> </svg> <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" id="stop-icon" style="display: none;" data-astro-cid-titvx7xv> <path d="M6 6h12v12H6z" data-astro-cid-titvx7xv></path> </svg> <span id="tts-text" data-astro-cid-titvx7xv>', '</span> </button> <div class="tts-progress" data-astro-cid-titvx7xv> <div class="tts-progress-bar" id="tts-progress-bar" data-astro-cid-titvx7xv></div> </div> </div>  <script>(function(){', "\n  class TextToSpeech {\n    constructor() {\n      this.synth = window.speechSynthesis;\n      this.utterance = null;\n      this.isPlaying = false;\n      this.currentIndex = 0;\n      this.textElements = [];\n      \n      this.toggleBtn = document.getElementById('tts-toggle');\n      this.playIcon = document.getElementById('play-icon');\n      this.stopIcon = document.getElementById('stop-icon');\n      this.ttsText = document.getElementById('tts-text');\n      this.progressBar = document.getElementById('tts-progress-bar');\n      \n      this.init();\n    }\n    \n    init() {\n      // Get all text content from the blog post\n      this.collectTextElements();\n      \n      // Event listeners\n      this.toggleBtn?.addEventListener('click', () => this.toggle());\n      \n      // Check if speech synthesis is supported\n      if (!this.synth) {\n        console.warn('Speech synthesis not supported');\n        this.toggleBtn.disabled = true;\n      }\n    }\n    \n    collectTextElements() {\n      const article = document.querySelector('article, .prose, .blog-content');\n      if (!article) return;\n      \n      // Get all text nodes (p, h1, h2, h3, li, etc.)\n      const selectors = 'h1, h2, h3, h4, h5, h6, p, li';\n      this.textElements = Array.from(article.querySelectorAll(selectors))\n        .filter(el => el.textContent.trim().length > 0);\n    }\n    \n    createUtterance(text) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      \n      // Set language based on locale\n      utterance.lang = locale === 'en' ? 'en-US' : 'tr-TR';\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n      \n      // Find appropriate voice\n      const voices = this.synth.getVoices();\n      const preferredVoice = voices.find(voice => \n        voice.lang.startsWith(locale === 'en' ? 'en' : 'tr')\n      );\n      \n      if (preferredVoice) {\n        utterance.voice = preferredVoice;\n      }\n      \n      return utterance;\n    }\n    \n    toggle() {\n      if (this.isPlaying) {\n        this.stop();\n      } else {\n        this.play();\n      }\n    }\n    \n    play() {\n      if (this.isPlaying) return;\n      \n      // Get all text content\n      const allText = this.textElements\n        .map(el => el.textContent.trim())\n        .join('. ');\n      \n      if (!allText) return;\n      \n      this.utterance = this.createUtterance(allText);\n      \n      // Event handlers\n      this.utterance.onstart = () => {\n        this.isPlaying = true;\n        this.updateUI('playing');\n        this.highlightCurrentText();\n      };\n      \n      this.utterance.onend = () => {\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        this.updateUI('stopped');\n        this.clearHighlights();\n        this.updateProgress(0);\n      };\n      \n      this.utterance.onboundary = (event) => {\n        if (event.name === 'word') {\n          this.updateProgress(event.charIndex / allText.length * 100);\n        }\n      };\n      \n      this.synth.speak(this.utterance);\n    }\n    \n    stop() {\n      this.synth.cancel();\n      this.isPlaying = false;\n      this.currentIndex = 0;\n      this.updateUI('stopped');\n      this.clearHighlights();\n      this.updateProgress(0);\n    }\n    \n    updateUI(state) {\n      const playText = locale === 'en' ? 'Play Audio' : 'Sesli Oku';\n      const stopText = locale === 'en' ? 'Stop Audio' : 'Durdur';\n      \n      if (state === 'playing') {\n        this.playIcon.style.display = 'none';\n        this.stopIcon.style.display = 'block';\n        this.ttsText.textContent = stopText;\n        this.toggleBtn.setAttribute('aria-label', stopText);\n        this.toggleBtn.setAttribute('title', stopText);\n      } else {\n        this.playIcon.style.display = 'block';\n        this.stopIcon.style.display = 'none';\n        this.ttsText.textContent = playText;\n        this.toggleBtn.setAttribute('aria-label', playText);\n        this.toggleBtn.setAttribute('title', playText);\n      }\n    }\n    \n    updateProgress(percentage) {\n      if (this.progressBar) {\n        this.progressBar.style.width = \\`\\${percentage}%\\`;\n      }\n    }\n    \n    highlightCurrentText() {\n      // Simple highlighting - could be enhanced\n      this.textElements.forEach((el, index) => {\n        if (index === this.currentIndex) {\n          el.classList.add('tts-current-text');\n        }\n      });\n    }\n    \n    clearHighlights() {\n      this.textElements.forEach(el => {\n        el.classList.remove('tts-current-text');\n      });\n    }\n  }\n  \n  // Initialize when DOM is loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => new TextToSpeech());\n  } else {\n    new TextToSpeech();\n  }\n})();<\/script>"])), maybeRenderHead(), addAttribute(t(locale, "accessibility.playAudio"), "aria-label"), addAttribute(t(locale, "accessibility.playAudio"), "title"), t(locale, "accessibility.playAudio"), defineScriptVars({ locale }));
}, "/Users/mac/Desktop/techoxium/src/components/TextToSpeech.astro", void 0);

export { $$FontSizeControl as $, $$TextToSpeech as a, $$BlogComment as b };
