---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import BlogComment from '../components/BlogComment.astro';
import FontSizeControl from '../components/FontSizeControl.astro';
import { tagToSlug } from '../lib/tag-utils.js';

export interface LayoutProps {
	title?: string;
	description?: string;
	date?: Date | string;
	updatedDate?: Date | string;
	image?: string;
	tags?: string[];
}

const { title = '', description = '', date, updatedDate, image, tags = [] } = Astro.props as LayoutProps;
---

<html lang="tr">
  <head>
    <BaseHead title={title} description={description} image={image} />
    
    <!-- Structured Data for Article -->
    <script is:inline type="application/ld+json" set:html={
      JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": title,
        "description": description,
        "image": image ? new URL(image, Astro.site).toString() : new URL('/logo.png', Astro.site).toString(),
        "datePublished": date ? new Date(date).toISOString() : undefined,
        "dateModified": updatedDate ? new Date(updatedDate).toISOString() : (date ? new Date(date).toISOString() : undefined),
        "author": {
          "@type": "Person",
          "name": "Techoxium",
          "url": "https://techoxium.com"
        },
        "publisher": {
          "@type": "Organization",
          "name": "Techoxium",
          "logo": {
            "@type": "ImageObject",
            "url": new URL('/logo.png', Astro.site).toString()
          }
        },
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": new URL(Astro.url.pathname, Astro.site).toString()
        },
        "url": new URL(Astro.url.pathname, Astro.site).toString(),
        "isPartOf": {
          "@type": "WebSite",
          "name": "Techoxium",
          "url": "https://techoxium.com"
        },
        "inLanguage": "tr-TR",
        "breadcrumb": {
          "@type": "BreadcrumbList",
          "itemListElement": [
            {
              "@type": "ListItem",
              "position": 1,
              "name": "Ana Sayfa",
              "item": new URL('/', Astro.site).toString()
            },
            {
              "@type": "ListItem",
              "position": 2,
              "name": title,
              "item": new URL(Astro.url.pathname, Astro.site).toString()
            }
          ]
        }
      })
    } />
  </head>

  <body>
    <Header />
    
    <main class="blog-post-main">
      <article class="blog-post">
        <header class="post-header">
          <div class="post-meta">
            <time class="post-date">
              <FormattedDate date={date} />
            </time>
            {updatedDate && (
              <time class="post-updated">
                Güncelleme: <FormattedDate date={updatedDate} />
              </time>
            )}
          </div>
          
          <h1 class="blog-post-title">{title}</h1>
          
          {description && (
            <p class="post-description">{description}</p>
          )}
          
          <div class="accessibility-controls">
            <FontSizeControl />
            <div class="share-controls" aria-label="Share post">
              <button class="share-btn" id="share-copy" title="Copy link" aria-label="Copy link">
                <!-- Copy icon (animated) -->
                <svg class="icon icon-copy" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                  <g>
                    <rect x="9" y="9" width="10" height="10" rx="2" ry="2" fill="currentColor" />
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
                  </g>
                </svg>
              </button>
            </div>
          </div>
          
          {tags && tags.length > 0 && (
            <div class="blog-post-tags">
              <div class="tags-label">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M4 9h16l-2 11H6L4 9Z"/>
                  <path d="M8 9V4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v5"/>
                  <path d="M9 20l.5-4"/>
                  <path d="M14.5 16l.5 4"/>
                  <path d="M8 12h.01"/>
                  <path d="M16 12h.01"/>
                </svg>
                Etiketler
              </div>
              <div class="tags-list">
                {tags.map((tag: string) => (
                  <a href={`/tag/${tagToSlug(tag)}/`} class="tag-link">
                    <span class="blog-tag-icon">
                      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M4 9h16l-2 11H6L4 9Z"/>
                        <path d="M8 9V4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v5"/>
                        <path d="M9 20l.5-4"/>
                        <path d="M14.5 16l.5 4"/>
                        <path d="M8 12h.01"/>
                        <path d="M16 12h.01"/>
                      </svg>
                    </span>
                    <span class="tag-text">{tag}</span>
                  </a>
                ))}
              </div>
            </div>
          )}
        </header>

        {image && (
          <div class="hero-image">
            <img 
              src={image} 
              alt={title}
              width={1200}
              height={630}
              loading="eager"
              decoding="async"
            />
          </div>
        )}

        <div class="blog-post-content prose">
          <slot />
        </div>

        <BlogComment />
      </article>
    </main>
    
    <Footer />
  </body>
</html>

<script>
  // @ts-nocheck
  // Plain JS share buttons behavior (removed TypeScript annotations)
  (function () {
    if (typeof window === 'undefined') return;

    const btnCopy = document.getElementById('share-copy');
    const pageUrl = window.location.href;
    const titleEl = document.querySelector('.post-title');
    const title = (titleEl && titleEl.textContent) ? titleEl.textContent : document.title;

    function pulse(btn) {
      if (!btn) return;
      btn.classList.add('active');
      setTimeout(() => btn.classList.remove('active'), 220);
    }

    if (btnCopy) {
      btnCopy.addEventListener('click', function () {
        pulse(btnCopy);
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(pageUrl).then(() => {
            try {
              // preserve innerHTML (so we don't permanently remove the SVG)
              const prevInner = btnCopy.innerHTML;
              // clear existing timer if any
              const existingTimer = (btnCopy).__copyTimer;
              if (existingTimer) clearTimeout(existingTimer);
              btnCopy.innerHTML = '<span class="copied-text">Kopyalandı!</span>';
              const t = window.setTimeout(() => {
                if (btnCopy) btnCopy.innerHTML = prevInner;
                (btnCopy).__copyTimer = undefined;
              }, 1500);
              (btnCopy).__copyTimer = t;
            } catch (e) {
              // fallback
              prompt('Copy this link', pageUrl);
            }
          }).catch(() => {
            // fallback to prompt for older browsers
            prompt('Copy this link', pageUrl);
          });
        } else {
          prompt('Copy this link', pageUrl);
        }
      });
    }
  })();
</script>
