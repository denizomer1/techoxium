---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import BlogComment from '../components/BlogComment.astro';
import FontSizeControl from '../components/FontSizeControl.astro';
import { tagToSlug } from '../lib/tag-utils.js';

export interface LayoutProps {
	title?: string;
	description?: string;
	pubDate?: Date | string;
	updatedDate?: Date | string;
	heroImage?: string;
	postSlug?: string;
	locale?: string;
	tags?: string[];
}

const { title = '', description = '', pubDate, updatedDate, heroImage, locale = 'tr', tags = [] } = Astro.props as LayoutProps;
---

<html lang={locale}>
  <head>
    <BaseHead title={title} description={description} image={heroImage} locale={locale} />
    
    <!-- Structured Data for Article -->
    <script is:inline type="application/ld+json" set:html={
      JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": title,
        "description": description,
        "image": heroImage ? new URL(heroImage, Astro.site).toString() : new URL('/logo.png', Astro.site).toString(),
        "datePublished": pubDate ? new Date(pubDate).toISOString() : undefined,
        "dateModified": updatedDate ? new Date(updatedDate).toISOString() : (pubDate ? new Date(pubDate).toISOString() : undefined),
        "author": {
          "@type": "Person",
          "name": "Techoxium",
          "url": "https://techoxium.com"
        },
        "publisher": {
          "@type": "Organization",
          "name": "Techoxium",
          "logo": {
            "@type": "ImageObject",
            "url": new URL('/logo.png', Astro.site).toString()
          }
        },
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": new URL(Astro.url.pathname, Astro.site).toString()
        },
        "url": new URL(Astro.url.pathname, Astro.site).toString(),
        "isPartOf": {
          "@type": "WebSite",
          "name": "Techoxium",
          "url": "https://techoxium.com"
        },
        "inLanguage": locale === 'en' ? 'en-US' : 'tr-TR',
        "breadcrumb": {
          "@type": "BreadcrumbList",
          "itemListElement": [
            {
              "@type": "ListItem",
              "position": 1,
              "name": locale === 'en' ? 'Home' : 'Ana Sayfa',
              "item": new URL(locale === 'en' ? '/en' : '/', Astro.site).toString()
            },
            {
              "@type": "ListItem",
              "position": 2,
              "name": locale === 'en' ? 'Blog' : 'Blog',
              "item": new URL(locale === 'en' ? '/en/blog' : '/blog', Astro.site).toString()
            },
            {
              "@type": "ListItem",
              "position": 3,
              "name": title,
              "item": new URL(Astro.url.pathname, Astro.site).toString()
            }
          ]
        }
      })
    } />
  </head>

  <body>
    <Header locale={locale} />
    
    <main class="blog-post-main">
      <article class="blog-post">
        <header class="post-header">
          <div class="post-meta">
            <time class="post-date">
              <FormattedDate date={pubDate} locale={locale} />
            </time>
            {updatedDate && (
              <time class="post-updated">
                GÃ¼ncelleme: <FormattedDate date={updatedDate} locale={locale} />
              </time>
            )}
          </div>
          
          <h1 class="post-title">{title}</h1>
          
          {description && (
            <p class="post-description">{description}</p>
          )}
          
          <div class="accessibility-controls">
            <FontSizeControl locale={locale} />
            <div class="share-controls" aria-label="Share post">
              <button class="share-btn" id="share-copy" title="Copy link" aria-label="Copy link">
                <!-- Copy icon (animated) -->
                <svg class="icon icon-copy" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                  <g>
                    <rect x="9" y="9" width="10" height="10" rx="2" ry="2" fill="currentColor" />
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
                  </g>
                </svg>
              </button>
            </div>
          </div>
          
          {tags && tags.length > 0 && (
            <div class="post-tags">
              <div class="tags-label">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M4 9h16l-2 11H6L4 9Z"/>
                  <path d="M8 9V4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v5"/>
                  <path d="M9 20l.5-4"/>
                  <path d="M14.5 16l.5 4"/>
                  <path d="M8 12h.01"/>
                  <path d="M16 12h.01"/>
                </svg>
                {locale === 'en' ? 'Tags' : 'Etiketler'}
              </div>
              <div class="tags-list">
                {tags.map((tag) => (
                  <a href={`/${locale === 'en' ? 'en/' : ''}tag/${tagToSlug(tag)}/`} class="tag-link">
                    <span class="tag-icon">
                      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M4 9h16l-2 11H6L4 9Z"/>
                        <path d="M8 9V4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v5"/>
                        <path d="M9 20l.5-4"/>
                        <path d="M14.5 16l.5 4"/>
                        <path d="M8 12h.01"/>
                        <path d="M16 12h.01"/>
                      </svg>
                    </span>
                    <span class="tag-text">{tag}</span>
                  </a>
                ))}
              </div>
            </div>
          )}
        </header>

        {heroImage && (
          <div class="hero-image">
            <img 
              src={heroImage} 
              alt={title}
              width={1200}
              height={630}
              loading="eager"
              decoding="async"
            />
          </div>
        )}

        <div class="post-content prose">
          <slot />
        </div>

        <BlogComment locale={locale} />
      </article>
    </main>
    
    <Footer locale={locale} />
  </body>
</html>

<style>
  .blog-post-main {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - var(--header-height) - 200px);
  }
  
  .blog-post {
    background: white;
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: var(--box-shadow);
    margin-bottom: 2rem;
  }
  
  .post-header {
    padding: 2rem;
    text-align: center;
    background: linear-gradient(135deg, rgb(var(--gray-light)), white);
    border-bottom: 1px solid rgb(var(--gray-light));
  }
  
  .post-meta {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: rgb(var(--gray));
    font-weight: 500;
  }
  
  .post-date,
  .post-updated {
    padding: 0.5rem 1rem;
    background: white;
    border-radius: 50px;
    box-shadow: 0 2px 8px rgba(var(--gray), 20%);
  }
  
  .post-title {
    font-size: clamp(1.75rem, 4vw, 2.5rem);
    font-weight: 800;
    line-height: 1.2;
    color: rgb(var(--black));
    margin: 0 0 1rem 0;
  }
  
    .post-description {
    font-size: 1.2rem;
    color: rgb(var(--gray));
    margin: 1.5rem 0;
    line-height: 1.6;
  }
  
  .accessibility-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    justify-content: center;
    margin: 2rem auto;
    padding: 1rem;
    background: var(--gray-gradient);
    border-radius: var(--border-radius);
    border: 1px solid var(--gray-light);
    max-width: 600px;
  }
  
  @media (max-width: 640px) {
    .accessibility-controls {
      flex-direction: column;
      gap: 0.5rem;
    }
  }
  
  .post-tags {
    margin: 2rem 0;
    padding: 1.5rem;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
    border-radius: 16px;
    border: 1px solid rgba(102, 126, 234, 0.1);
  }
  
  .tags-label {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: rgb(var(--gray));
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .tags-label svg {
    color: #667eea;
  }
  
  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
  }
  
  .tag-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-decoration: none;
    border-radius: 24px;
    font-size: 0.875rem;
    font-weight: 600;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 12px rgba(102, 126, 234, 0.3);
    position: relative;
    overflow: hidden;
    text-transform: capitalize;
    letter-spacing: 0.025em;
  }
  
  .tag-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .tag-link:hover::before {
    left: 100%;
  }
  
  .tag-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
    background: linear-gradient(135deg, #5b6bc0 0%, #6b5b8c 100%);
  }
  
  .tag-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transition: all 0.3s ease;
  }
  
  .tag-link:hover .tag-icon {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }
  
  .tag-icon svg {
    width: 10px;
    height: 10px;
    color: white;
  }
  
  .tag-text {
    font-size: 0.875rem;
    font-weight: 600;
    white-space: nowrap;
  }
  
  .hero-image {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
  }
  
  .hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .post-content {
    padding: 2rem;
    line-height: 1.7;
    font-size: 1.125rem;
  }
  
  /* Prose styles for markdown content */
  .prose h2, .prose h3, .prose h4 {
    margin: 2rem 0 1rem 0;
    color: rgb(var(--black));
    font-weight: 700;
  }
  
  .prose h2 {
    font-size: 1.75rem;
    border-bottom: 2px solid rgb(var(--gray-light));
    padding-bottom: 0.5rem;
  }
  
  .prose h3 {
    font-size: 1.5rem;
  }
  
  .prose h4 {
    font-size: 1.25rem;
  }
  
  .prose p {
    margin-bottom: 1.5rem;
    color: rgb(var(--gray-dark));
  }
  
  .prose a {
    color: var(--accent);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: var(--transition);
  }
  
  .prose a:hover {
    border-bottom-color: var(--accent);
  }
  
  .prose ul, .prose ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
    color: rgb(var(--gray-dark));
  }
  
  .prose blockquote {
    margin: 2rem 0;
    padding: 1rem 2rem;
    border-left: 4px solid var(--accent);
    background: rgb(var(--gray-light));
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    font-style: italic;
  }
  
  .prose code {
    background: rgb(var(--gray-light));
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.9em;
    color: var(--accent-dark);
  }
  
  .prose pre {
    background: rgb(var(--black));
    color: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .prose pre code {
    background: none;
    color: inherit;
    padding: 0;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .blog-post-main {
      padding: 1rem;
    }
    
    .post-header {
      padding: 1.5rem;
    }
    
    .post-content {
      padding: 1.5rem;
      font-size: 1rem;
    }
    
    .post-meta {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .prose h2 {
      font-size: 1.5rem;
    }
    
    .prose h3 {
      font-size: 1.25rem;
    }
    
    .prose ul, .prose ol {
      padding-left: 1.5rem;
    }
    
    .prose blockquote {
      padding: 1rem;
      margin: 1rem 0;
    }
  }
  
  :global(html.dark) .blog-post {
    background: #121317 !important;
  }
  
  :global(html.dark) .post-header {
    background: linear-gradient(135deg, #1f1f2e, #2a2a38) !important;
    border-bottom-color: #404040 !important;
  }
  
  :global(html.dark) .post-date,
  :global(html.dark) .post-updated {
    background: #1f1f2e !important;
    color: #f5f7fa !important;
  }
  
  :global(html.dark) .post-title {
    color: #f5f7fa !important;
  }
  
  :global(html.dark) .post-description {
    color: #c7d0dc !important;
  }

  .share-controls {
    display: inline-flex;
    gap: 0.5rem;
    align-items: center;
  }
  .share-btn {
    /* Light mode default: dark icons on light background */
    background: linear-gradient(180deg, rgba(0,0,0,0.02), rgba(0,0,0,0.01));
    border: 1px solid rgba(0,0,0,0.08);
    width: 44px;
    height: 44px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 999px;
    box-shadow: 0 6px 18px rgba(16,24,40,0.04);
    cursor: pointer;
    transition: transform 180ms ease, box-shadow 180ms ease;
    color: rgb(10,10,10);
    background-color: rgba(0,0,0,0.03);
  }

  .share-btn:hover {
    transform: translateY(-6px) scale(1.05);
    box-shadow: 0 12px 36px rgba(16,24,40,0.12);
  }

  .icon {
    display: block;
    transition: transform 240ms cubic-bezier(.2,.9,.3,1), opacity 120ms ease;
    transform-origin: center;
    will-change: transform, opacity;
  }

  .share-btn:hover .icon {
    transform: rotate(-10deg) scale(1.08);
    opacity: 0.95;
  }

  .share-btn.active .icon {
    transform: scale(1.25) rotate(6deg);
    transition: transform 180ms ease;
    opacity: 1;
  }

  .copied-text {
    font-weight: 700;
    font-size: 0.9rem;
    color: inherit;
    display: inline-block;
  }

  /* Dark Mode Support */
  :global(html.dark) .post-tags {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.02)) !important;
    border-color: rgba(255, 255, 255, 0.1) !important;
  }
  
  :global(html.dark) .tags-label {
    color: rgba(255, 255, 255, 0.7) !important;
  }
  
  :global(html.dark) .tags-label svg {
    color: #7fb3ff !important;
  }
  
  :global(html.dark) .tag-link {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08)) !important;
    color: #e6eefb !important;
    box-shadow: 0 2px 12px rgba(255, 255, 255, 0.1) !important;
  }
  
  :global(html.dark) .tag-link:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15)) !important;
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.2) !important;
  }
  
  :global(html.dark) .tag-icon {
    background: rgba(255, 255, 255, 0.15) !important;
  }
  
  :global(html.dark) .tag-link:hover .tag-icon {
    background: rgba(255, 255, 255, 0.25) !important;
  }

  /* Share buttons are static by default; hover triggers animation */
  /* Hover animation handled by .share-btn:hover and .share-btn.active */

  /* Dark mode overrides: white icons on darker circular buttons */
  :global(html.dark) .share-btn {
    background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)) !important;
    border: 1px solid rgba(255,255,255,0.08) !important;
    color: #f5f7fa !important;
    background-color: rgba(255,255,255,0.04) !important;
    box-shadow: 0 6px 18px rgba(0,0,0,0.18) !important;
  }
  
  :global(html.dark) .prose h2,
  :global(html.dark) .prose h3,
  :global(html.dark) .prose h4 {
    color: #f5f7fa !important;
  }
  
  :global(html.dark) .prose p,
  :global(html.dark) .prose li {
    color: #c7d0dc !important;
  }
  
  :global(html.dark) .prose blockquote {
    background: #1f1f2e !important;
    border-left-color: #7fb3ff !important;
  }
  
  :global(html.dark) .prose code {
    background: #1f1f2e !important;
    color: #7fb3ff !important;
  }
</style>

<script>
  // @ts-nocheck
  // Plain JS share buttons behavior (removed TypeScript annotations)
  (function () {
    if (typeof window === 'undefined') return;

    const btnCopy = document.getElementById('share-copy');
    const pageUrl = window.location.href;
    const titleEl = document.querySelector('.post-title');
    const title = (titleEl && titleEl.textContent) ? titleEl.textContent : document.title;

    function pulse(btn) {
      if (!btn) return;
      btn.classList.add('active');
      setTimeout(() => btn.classList.remove('active'), 220);
    }

    if (btnCopy) {
      btnCopy.addEventListener('click', function () {
        pulse(btnCopy);
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(pageUrl).then(() => {
            try {
              // preserve innerHTML (so we don't permanently remove the SVG)
              const prevInner = btnCopy.innerHTML;
              // clear existing timer if any
              const existingTimer = (btnCopy).__copyTimer;
              if (existingTimer) clearTimeout(existingTimer);
              btnCopy.innerHTML = '<span class="copied-text">Copied!</span>';
              const t = window.setTimeout(() => {
                if (btnCopy) btnCopy.innerHTML = prevInner;
                (btnCopy).__copyTimer = undefined;
              }, 1500);
              (btnCopy).__copyTimer = t;
            } catch (e) {
              // fallback
              prompt('Copy this link', pageUrl);
            }
          }).catch(() => {
            // fallback to prompt for older browsers
            prompt('Copy this link', pageUrl);
          });
        } else {
          prompt('Copy this link', pageUrl);
        }
      });
    }
  })();
</script>
