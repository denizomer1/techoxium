---
import HeaderLink from './HeaderLink.astro';
import LanguageSwitcher from './LanguageSwitcher.astro';
import CategoryDropdown from './CategoryDropdown.astro';
import { SITE_TITLE } from '../consts';
import { t } from '../i18n/utils';

interface Props {
  locale?: string;
}

const { locale = 'tr' } = Astro.props;
const homeUrl = locale === 'en' ? '/en' : '/tr';
const aboutUrl = locale === 'en' ? '/en/about' : '/tr/about';
---

<header class="main-header">
  <nav class="nav-container">
    <div class="nav-brand">
      <a href={homeUrl} class="brand-link">
        <img src="/logo.png" alt={SITE_TITLE} width="32" height="32" />
        <span class="brand-text">{SITE_TITLE}</span>
      </a>
    </div>
    
    <div class="nav-header-actions">
  <LanguageSwitcher locale={locale} currentPath={Astro.url.pathname} />
      <button class="theme-toggle" id="theme-toggle" aria-label={t(locale, 'nav.themeToggle') || 'Tema değiştir'}>
        <div class="theme-icon">
          <svg class="sun-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="5"/>
            <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
          </svg>
          <svg class="moon-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </div>
      </button>
      
      <button class="nav-toggle" id="nav-toggle" aria-label={t(locale, 'nav.toggleMenu') || 'Menüyü aç/kapat'}>
        <span></span>
        <span></span>
        <span></span>
      </button>
    </div>
    
    <div class="nav-menu" id="nav-menu">
      <div class="nav-search-mobile">
        <div class="modern-search">
          <div class="search-container">
            <svg class="search-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="7"/>
              <line x1="16.65" y1="16.65" x2="22" y2="22"/>
            </svg>
            <input type="text" placeholder={t(locale, 'nav.search')} class="search-input" autocomplete="off" />
            <button class="search-clear" style="display: none;">&times;</button>
          </div>
          <div class="search-results"></div>
        </div>
      </div>
      
      <div class="nav-links">
        <HeaderLink href={aboutUrl}>{t(locale, 'nav.about')}</HeaderLink>
      </div>
      
      <div class="nav-actions-desktop">
  <LanguageSwitcher locale={locale} currentPath={Astro.url.pathname} />
  <CategoryDropdown locale={locale} />

        <div class="nav-search">
          <div class="modern-search">
            <div class="search-container">
              <svg class="search-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="7"/>
                <line x1="16.65" y1="16.65" x2="22" y2="22"/>
              </svg>
              <input type="text" placeholder={t(locale, 'nav.search')} class="search-input" autocomplete="off" />
              <button class="search-clear" style="display: none;">&times;</button>
            </div>
            <div class="search-results"></div>
          </div>
        </div>        <button class="theme-toggle theme-toggle-desktop" id="theme-toggle-desktop" aria-label={t(locale, 'nav.themeToggle') || 'Tema değiştir'}>
          <div class="theme-icon">
            <svg class="sun-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="5"/>
              <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
            </svg>
            <svg class="moon-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
            </svg>
          </div>
        </button>
      </div>
    </div>
  </nav>
</header>

<style>
  .main-header {
    position: sticky;
    top: 0;
    z-index: 1000;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgb(var(--gray-light));
    height: var(--header-height);
  }
  
  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }
  
  .nav-brand {
    flex-shrink: 0;
  }
  
  .nav-header-actions {
    display: none;
    align-items: center;
    gap: 1rem;
  }
  
  .brand-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    color: rgb(var(--black));
    font-weight: 700;
    font-size: 1.25rem;
    transition: var(--transition);
  }
  
  .brand-link:hover {
    color: var(--accent-light);
  }
  
  .brand-text {
    font-family: 'Segoe UI', system-ui, sans-serif;
  }
  
  .nav-menu {
    display: flex;
    align-items: center;
    gap: 2rem;
    flex: 1;
    justify-content: space-between;
  }
  
  .nav-links {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }
  
  /* Modern click effects for nav items */
  :global(.nav-links a) {
    position: relative;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    overflow: hidden;
  }
  
  :global(.nav-links a::before) {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(var(--accent-rgb), 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
    z-index: -1;
  }
  
  :global(.nav-links a:hover::before) {
    width: 200px;
    height: 200px;
    background: rgba(var(--accent-rgb), 0.12);
  }
  
  :global(.nav-links a:active) {
    transform: scale(0.95);
  }
  
  :global(.nav-links a:hover) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(var(--accent-rgb), 0.12);
  }
  
  .nav-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .nav-search {
    flex-shrink: 0;
  }
  
  .nav-search-mobile {
    display: none;
  }
  
  .nav-actions-desktop {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .theme-toggle-desktop {
    display: flex;
  }
  
  /* Modern Theme Toggle */
  .theme-toggle {
    position: relative;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(var(--accent-rgb), 0.2);
    cursor: pointer;
    padding: 0.5rem;
    outline: none;
    border-radius: 50%;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(10px);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }
  
  .theme-toggle:hover {
    background: rgba(var(--accent-rgb), 0.1);
    border-color: var(--accent);
    transform: scale(1.05);
    box-shadow: 
      0 4px 16px rgba(var(--accent-rgb), 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }
  
  .theme-toggle:active {
    transform: scale(0.95);
  }
  
  .theme-icon {
    position: relative;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .theme-icon svg {
    position: absolute;
    width: 20px;
    height: 20px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .sun-icon {
    color: #f59e0b;
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
  
  .moon-icon {
    color: #6366f1;
    opacity: 0;
    transform: rotate(-90deg) scale(0.5);
  }
  
  /* Dark mode state */
  .theme-toggle.dark {
    background: rgba(15, 20, 25, 0.8);
    border-color: rgba(99, 102, 241, 0.4);
  }
  
  .theme-toggle.dark:hover {
    background: rgba(99, 102, 241, 0.2);
    border-color: #6366f1;
  }
  
  .theme-toggle.dark .sun-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.5);
  }
  
  .theme-toggle.dark .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
  
  /* Pulse animation for theme toggle */
  @keyframes theme-pulse {
    0%, 100% {
      box-shadow: 
        0 2px 8px rgba(0, 0, 0, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
    50% {
      box-shadow: 
        0 4px 16px rgba(var(--accent-rgb), 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
    }
  }
  
  .theme-toggle:focus-visible {
    animation: theme-pulse 1s infinite;
  }
  
  .nav-toggle {
    display: none;
    flex-direction: column;
    justify-content: space-around;
    width: 2rem;
    height: 2rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    z-index: 10;
    border-radius: var(--border-radius);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  
  .nav-toggle::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(var(--accent-rgb), 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
    z-index: -1;
  }
  
  .nav-toggle:hover::before {
    width: 60px;
    height: 60px;
  }
  
  .nav-toggle:hover {
    transform: scale(1.1);
  }
  
  .nav-toggle:active {
    transform: scale(0.95);
  }
  
  .nav-toggle span {
    width: 1.5rem;
    height: 0.2rem;
    background: rgb(var(--black));
    border-radius: 2px;
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    transform-origin: center;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  .nav-toggle.active span:first-child {
    transform: rotate(45deg) translate(0.3rem, 0.3rem);
  }
  
  .nav-toggle.active span:nth-child(2) {
    opacity: 0;
    transform: scale(0);
  }
  
  .nav-toggle.active span:nth-child(3) {
    transform: rotate(-45deg) translate(0.3rem, -0.3rem);
  }
  
  /* Mobile styles */
  @media (max-width: 768px) {
    .nav-container {
      padding: 0 1rem;
    }
    
    .nav-header-actions {
      display: flex;
    }
    
    .nav-toggle {
      display: flex;
    }
    
    .nav-menu {
      position: fixed;
      top: var(--header-height);
      left: 0;
      right: 0;
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(20px);
      flex-direction: column;
      padding: 1.5rem 1rem 2rem;
      gap: 1.5rem;
      transform: translateX(100%);
      transition: var(--transition);
      border-top: 1px solid rgb(var(--gray-light));
      box-shadow: 0 10px 40px rgba(var(--gray), 20%);
      height: calc(100vh - var(--header-height));
      overflow-y: auto;
    }
    
    .nav-menu.active {
      transform: translateX(0);
    }
    
    .nav-search-mobile {
      display: block;
      order: -3;
    }
    
    .nav-links {
      flex-direction: column;
      gap: 1rem;
      width: 100%;
      order: -2;
    }
    
    .nav-actions-desktop {
      display: none;
    }
    
    .nav-search {
      display: none;
    }
    
    .theme-toggle-desktop {
      display: none;
    }
    
    .brand-text {
      display: none;
    }
  }
  
  @media (max-width: 480px) {
    .nav-container {
      padding: 0 0.75rem;
    }
  }
  
  /* Dark mode styles */
  :global(html.dark) .main-header {
    background: rgba(15, 15, 23, 0.95);
    border-bottom-color: #404040;
  }
  
  :global(html.dark) .nav-menu {
    background: rgba(15, 15, 23, 0.98);
    border-top-color: #404040;
  }
  
  :global(html.dark) .brand-link {
    color: white;
  }
  
  :global(html.dark) .nav-toggle span {
    background: white;
  }
  
  :global(html.dark) .theme-toggle {
    background: rgba(15, 20, 25, 0.8);
    border-color: rgba(99, 102, 241, 0.3);
  }
  
  :global(html.dark) .theme-toggle:hover {
    background: rgba(99, 102, 241, 0.2);
    border-color: #6366f1;
  }

  /* Make logo visually white in dark mode. If you prefer a dedicated white PNG/SVG, replace `/logo.png` with the white asset and remove the filter. */
  :global(html.dark) .brand-link img {
    filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%);
  }

  /* Modern Compact Search */
  .modern-search {
    position: relative;
    width: 100%;
    max-width: 280px;
  }

  .search-container {
    display: flex;
    align-items: center;
    gap: 8px;
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 20px;
    padding: 6px 12px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(8px);
    min-height: 36px;
  }

  .search-container:hover {
    background: rgba(255, 255, 255, 0.9);
    border-color: rgba(0, 0, 0, 0.15);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }

  .search-container:focus-within {
    background: rgba(255, 255, 255, 0.95);
    border-color: var(--accent);
    box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.1);
  }

  .search-icon {
    opacity: 0.5;
    flex-shrink: 0;
    transition: opacity 0.2s ease;
  }

  .search-container:focus-within .search-icon {
    opacity: 0.7;
  }

  .search-input {
    flex: 1;
    border: none;
    outline: none;
    background: transparent;
    font-size: 13px;
    font-weight: 400;
    color: rgba(0, 0, 0, 0.8);
    min-width: 0;
  }

  .search-input::placeholder {
    color: rgba(0, 0, 0, 0.4);
    font-weight: 400;
  }

  .search-clear {
    display: none;
    background: rgba(0, 0, 0, 0.1);
    border: none;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
    color: rgba(0, 0, 0, 0.6);
  }

  .search-clear:hover {
    background: rgba(0, 0, 0, 0.15);
    transform: scale(1.1);
  }

  .search-results {
    position: absolute;
    top: calc(100% + 6px);
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    max-height: 240px;
    overflow-y: auto;
    display: none;
    z-index: 1001;
    animation: searchSlideIn 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  @keyframes searchSlideIn {
    from {
      opacity: 0;
      transform: translateY(-8px) scale(0.98);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .search-result {
    display: block;
    padding: 10px 14px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.04);
    text-decoration: none;
    color: rgba(0, 0, 0, 0.8);
    transition: all 0.15s ease;
    font-size: 13px;
    font-weight: 500;
  }

  .search-result:hover {
    background: rgba(var(--accent-rgb), 0.06);
    color: var(--accent);
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .search-result:first-child {
    border-radius: 12px 12px 0 0;
  }

  .search-result:last-child {
    border-radius: 0 0 12px 12px;
  }

  .search-result:only-child {
    border-radius: 12px;
  }

  /* Search dropdown: boxed stacked card items (no !important) */
  .modern-search .search-results.open {
    display: block;
  }

  .modern-search .search-results {
    min-width: 260px;
    max-width: 360px;
    right: auto;
    left: auto;
    background: var(--card-bg, #ffffff);
    padding: 10px;
    box-sizing: border-box;
  }

  .modern-search .search-results .search-result {
    display: block;
    background: var(--card-bg, #ffffff);
    border: 1px solid rgba(0,0,0,0.06);
    border-radius: 8px;
    margin: 6px 0;
    box-shadow: 0 6px 18px rgba(0,0,0,0.08);
    color: rgba(0,0,0,0.85);
    text-decoration: none;
    overflow: hidden; /* Prevent content overflow */
  }

  /* Thumbnail and content layout */
  .modern-search .search-result-row {
    display: flex !important;
    gap: 12px !important;
    align-items: flex-start !important;
    width: 100% !important;
    padding: 10px 12px !important;
    box-sizing: border-box !important;
  }

  .modern-search .search-thumb {
    flex-shrink: 0 !important;
    width: 64px !important;
    height: 48px !important;
    flex-basis: 64px !important;
  }

  .modern-search .search-thumb img {
    width: 100% !important;
    height: 100% !important;
    object-fit: cover !important;
    border-radius: 6px !important;
    background: #f8f9fa !important;
    display: block !important;
  }

  .modern-search .search-result-content {
    display: flex !important;
    flex-direction: column !important;
    gap: 4px !important;
    flex: 1 !important;
    min-width: 0 !important;
    overflow: hidden !important;
  }

  .modern-search .search-result-title {
    font-weight: 600 !important;
    margin: 0 !important;
    font-size: 0.9rem !important;
    line-height: 1.3 !important;
    color: rgba(0,0,0,0.9) !important;
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    display: -webkit-box !important;
    -webkit-line-clamp: 2 !important;
    -webkit-box-orient: vertical !important;
    white-space: normal !important;
  }

  .modern-search .search-result-date {
    font-size: 0.75rem !important;
    color: rgba(0,0,0,0.6) !important;
    margin: 0 !important;
    font-weight: 500 !important;
  }

  .modern-search .search-result-desc {
    font-size: 0.8rem !important;
    color: rgba(0,0,0,0.7) !important;
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    display: -webkit-box !important;
    -webkit-line-clamp: 2 !important;
    -webkit-box-orient: vertical !important;
    margin: 0 !important;
    line-height: 1.2 !important;
  }

  :global(html.dark) .modern-search .search-results .search-result {
    background: rgba(20,22,28,0.6);
    color: #e6eefb;
    border-color: rgba(255,255,255,0.04);
  }

  :global(html.dark) .modern-search .search-thumb img {
    background: rgba(255,255,255,0.1);
  }

  :global(html.dark) .modern-search .search-result-title {
    color: rgba(255,255,255,0.9);
  }

  :global(html.dark) .modern-search .search-result-date {
    color: rgba(255,255,255,0.5);
  }

  :global(html.dark) .modern-search .search-result-desc {
    color: rgba(255,255,255,0.7);
  }

  /* Desktop specific */
  @media (min-width: 769px) {
    .modern-search {
      max-width: 220px;
    }
    
    .search-container {
      padding: 5px 10px;
      min-height: 32px;
    }
    
    .search-input {
      font-size: 12px;
    }
  }

  /* Mobile specific */
  @media (max-width: 768px) {
    .modern-search {
      max-width: 100%;
    }
  }

  /* Dark mode */
  :global(html.dark) .search-container {
    background: rgba(15, 20, 25, 0.8);
    border-color: rgba(255, 255, 255, 0.1);
  }

  :global(html.dark) .search-container:hover {
    background: rgba(15, 20, 25, 0.9);
    border-color: rgba(255, 255, 255, 0.15);
  }

  :global(html.dark) .search-container:focus-within {
    background: rgba(15, 20, 25, 0.95);
  }

  :global(html.dark) .search-input {
    color: rgba(255, 255, 255, 0.9);
  }

  :global(html.dark) .search-input::placeholder {
    color: rgba(255, 255, 255, 0.4);
  }

  :global(html.dark) .search-clear {
    background: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.6);
  }

  :global(html.dark) .search-clear:hover {
    background: rgba(255, 255, 255, 0.15);
  }

  :global(html.dark) .search-results {
    background: rgba(15, 20, 25, 0.95);
    border-color: rgba(255, 255, 255, 0.08);
  }

  :global(html.dark) .search-result {
    color: rgba(255, 255, 255, 0.8);
    border-bottom-color: rgba(255, 255, 255, 0.06);
  }

  :global(html.dark) .search-result:hover {
    background: rgba(var(--accent-rgb), 0.15);
    color: var(--accent-light, #a78bfa);
  }
</style>

<script>
  // @ts-nocheck
  // Plain JS: guard DOM references (remove TypeScript annotations)
  const navToggle = document.getElementById('nav-toggle');
  const navMenu = document.getElementById('nav-menu');
  const themeToggle = document.getElementById('theme-toggle');
  const themeToggleDesktop = document.getElementById('theme-toggle-desktop');

  // Navigation functionality
  function toggleNav() {
    if (navToggle) navToggle.classList.toggle('active');
    if (navMenu) navMenu.classList.toggle('active');
    document.body.style.overflow = (navMenu && navMenu.classList.contains('active')) ? 'hidden' : '';
  }

  if (navToggle) navToggle.addEventListener('click', toggleNav);

  // Close nav when clicking on links (mobile)
  if (navMenu) {
    navMenu.addEventListener('click', (e) => {
      const target = e.target;
      if (target instanceof HTMLAnchorElement && window.innerWidth <= 768) {
        if (navToggle) navToggle.classList.remove('active');
        navMenu.classList.remove('active');
        document.body.style.overflow = '';
      }
    });
  }

  // Close nav when clicking outside (mobile)
  document.addEventListener('click', (e) => {
    const target = e.target;
    if (!(target instanceof Node)) return;
    if (navToggle && navMenu && themeToggle) {
      if (!navToggle.contains(target) && !navMenu.contains(target) && !themeToggle.contains(target)) {
        navToggle.classList.remove('active');
        navMenu.classList.remove('active');
        document.body.style.overflow = '';
      }
    }
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth > 768) {
      if (navToggle) navToggle.classList.remove('active');
      if (navMenu) navMenu.classList.remove('active');
      document.body.style.overflow = '';
    }
  });

  // Theme toggle functionality
  function initTheme() {
    const savedTheme = localStorage.getItem('theme');
    const systemDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const isDark = savedTheme === 'dark' || (!savedTheme && systemDark);

    document.documentElement.classList.toggle('dark', isDark);
    if (themeToggle) themeToggle.classList.toggle('dark', isDark);
    if (themeToggleDesktop) themeToggleDesktop.classList.toggle('dark', isDark);
    if (themeToggle) themeToggle.setAttribute('aria-label', isDark ? 'Açık moda geç' : 'Koyu moda geç');
    if (themeToggleDesktop) themeToggleDesktop.setAttribute('aria-label', isDark ? 'Açık moda geç' : 'Koyu moda geç');
  }

  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const newTheme = isDark ? 'light' : 'dark';

    document.documentElement.classList.toggle('dark', newTheme === 'dark');
    if (themeToggle) themeToggle.classList.toggle('dark', newTheme === 'dark');
    if (themeToggleDesktop) themeToggleDesktop.classList.toggle('dark', newTheme === 'dark');
    localStorage.setItem('theme', newTheme);
    if (themeToggle) themeToggle.setAttribute('aria-label', newTheme === 'dark' ? 'Açık moda geç' : 'Koyu moda geç');
    if (themeToggleDesktop) themeToggleDesktop.setAttribute('aria-label', newTheme === 'dark' ? 'Açık moda geç' : 'Koyu moda geç');
  }

  // Initialize theme on page load
  initTheme();

  // Theme toggle event listeners
  if (themeToggle) themeToggle.addEventListener('click', toggleTheme);
  if (themeToggleDesktop) themeToggleDesktop.addEventListener('click', toggleTheme);

  // Listen for system theme changes
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        document.documentElement.classList.toggle('dark', e.matches);
        if (themeToggle) themeToggle.classList.toggle('dark', e.matches);
        if (themeToggleDesktop) themeToggleDesktop.classList.toggle('dark', e.matches);
        if (themeToggle) themeToggle.setAttribute('aria-label', e.matches ? 'Açık moda geç' : 'Koyu moda geç');
        if (themeToggleDesktop) themeToggleDesktop.setAttribute('aria-label', e.matches ? 'Açık moda geç' : 'Koyu moda geç');
      }
    });
  }

  // Modern Search Implementation (plain JS)
  class SearchManager {
    constructor() {
      this.posts = [];
      this.locale = document.documentElement.lang || 'tr';
      this.loadPosts().then(() => {
        this.initializeSearch();
      });
    }

    formatDate(dateString) {
      try {
        const date = new Date(dateString);
        const day = date.getDate();
        const month = this.locale === 'tr' ? 
          ['ocak', 'şubat', 'mart', 'nisan', 'mayıs', 'haziran', 'temmuz', 'ağustos', 'eylül', 'ekim', 'kasım', 'aralık'][date.getMonth()] :
          ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][date.getMonth()];
        const year = date.getFullYear();
        return this.locale === 'tr' ? `${day} ${month} ${year}` : `${month} ${day}, ${year}`;
      } catch {
        return dateString;
      }
    }

    async loadPosts() {
      try {
        const response = await fetch(`/api/posts.json?locale=${this.locale}`);
        if (response.ok) {
          this.posts = await response.json();
        } else {
          console.warn('Could not load posts, using fallback');
          this.posts = [];
        }
      } catch (error) {
        console.warn('Error loading posts:', error);
        this.posts = [];
      }
    }

    initializeSearch() {
      document.querySelectorAll('.modern-search').forEach(searchWrapper => {
        const input = searchWrapper.querySelector('.search-input');
        const results = searchWrapper.querySelector('.search-results');
        const clearBtn = searchWrapper.querySelector('.search-clear');

        if (!input || !results || !clearBtn) return;

        this.setupEventListeners(input, results, clearBtn, searchWrapper);
      });

      // Previously listened for 'tag-selected' events to auto-run searches.
      // That behavior was removed to keep tag navigation separate from search.
    }

    setupEventListeners(input, results, clearBtn, wrapper) {
      // Search input event
      input.addEventListener('input', (e) => {
        const query = input.value.trim();

        if (query) {
          clearBtn.style.display = 'flex';
          this.performSearch(query, results);
        } else {
          clearBtn.style.display = 'none';
          this.hideResults(results);
        }
      });

      // Clear button
      clearBtn.addEventListener('click', () => {
        input.value = '';
        clearBtn.style.display = 'none';
        this.hideResults(results);
        input.focus();
      });

      // Focus events
      input.addEventListener('focus', () => {
        if (input.value.trim()) {
          this.performSearch(input.value.trim(), results);
        }
      });

      // Click outside to close
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (!(target instanceof Node)) return;
        if (!wrapper.contains(target)) {
          this.hideResults(results);
        }
      });

      // Keyboard shortcuts
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.hideResults(results);
          input.blur();
        }
      });
    }

    performSearch(query, resultsElement) {
      const raw = String(query).toLowerCase();
      // support queries like '#teknoloji' or plain 'teknoloji'
      const q = raw.startsWith('#') ? raw.slice(1).trim() : raw.trim();
      const qNormalized = q.replace(/\s+/g, ' ');
      const qAsTag = qNormalized.replace(/\s+/g, '-');

      const filtered = this.posts.filter((post) => {
        const inTitle = (post.title || '').toLowerCase().includes(q);
        const inDesc = (post.description || '').toLowerCase().includes(q);
        const inTags = Array.isArray(post.tags) && post.tags.some(t => {
          const tagRaw = String(t || '').toLowerCase();
          const tagDisplay = tagRaw.replace(/-/g, ' ');
          return tagRaw.includes(q) || tagDisplay.includes(q) || tagRaw.includes(qAsTag);
        });

        return inTitle || inDesc || inTags;
      });

      // Clear existing
      resultsElement.innerHTML = '';

      if (!filtered.length) {
        const noResultsText = this.locale === 'en' ? 'No results found' : 'Sonuç bulunamadı';
        const empty = document.createElement('div');
        empty.className = 'search-result';
        empty.textContent = noResultsText;
        resultsElement.appendChild(empty);
      } else {
        const urlPrefix = this.locale === 'en' ? '/en/' : '/tr/';
        filtered.slice(0, 8).forEach((post) => {
          const a = document.createElement('a');
          a.className = 'search-result';
          a.href = `${urlPrefix}${post.slug}/`;
          a.setAttribute('role', 'option');

          const isDark = document.documentElement.classList.contains('dark');
          const textColor = isDark ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)';
          const descColor = isDark ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.7)';
          const dateColor = isDark ? 'rgba(255,255,255,0.6)' : 'rgba(0,0,0,0.6)';
          const imgBg = isDark ? 'rgba(255,255,255,0.1)' : '#f8f9fa';

          const thumbHtml = post.heroImage ? `<div class="search-thumb" style="flex-shrink: 0; width: 64px; height: 48px;"><img src="${post.heroImage}" alt="" loading="lazy" style="width: 100%; height: 100%; object-fit: cover; border-radius: 6px; background: ${imgBg}; display: block;"/></div>` : '';
          const titleHtml = `<div class="search-result-title" style="font-weight: 600; margin: 0; font-size: 0.9rem; line-height: 1.3; color: ${textColor}; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; white-space: normal;">${post.title || ''}</div>`;
          const descHtml = post.description ? `<div class="search-result-desc" style="font-size: 0.8rem; color: ${descColor}; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; margin: 0; line-height: 1.2;">${post.description}</div>` : '';
          const dateHtml = post.pubDate ? `<div class="search-result-date" style="font-size: 0.75rem; color: ${dateColor}; margin: 0; font-weight: 500;">${this.formatDate(post.pubDate)}</div>` : '';

          a.innerHTML = `
            <div class="search-result-row" style="display: flex; gap: 12px; align-items: flex-start; width: 100%; padding: 10px 12px; box-sizing: border-box;">
              ${thumbHtml}
              <div class="search-result-content" style="display: flex; flex-direction: column; gap: 4px; flex: 1; min-width: 0; overflow: hidden;">
                ${titleHtml}
                ${descHtml}
                ${dateHtml}
              </div>
            </div>
          `;

          resultsElement.appendChild(a);
        });
      }

      this.showResults(resultsElement);
    }

    showResults(element) {
      element.style.display = 'block';
      element.classList.add('open');
    }

    hideResults(element) {
      element.style.display = 'none';
      element.classList.remove('open');
    }
  }

  // Initialize search when DOM is ready
  new SearchManager();
</script>
