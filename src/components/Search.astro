<div class="search-root">
  <div class="search-bar">
    <svg class="loop" width="18" height="18" viewBox="0 0 24 24" aria-hidden="true">
      <circle cx="11" cy="11" r="7" stroke="currentColor" stroke-width="2" fill="none"/>
      <line x1="16.65" y1="16.65" x2="22" y2="22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
    <input class="search-input" type="search" placeholder="Arama yapÄ±n..." aria-label="Search posts" autocomplete="off" />
    <button class="clear-btn" type="button" aria-label="Clear search" hidden>&times;</button>
  </div>
  <div class="results" role="listbox" aria-label="Search results" hidden></div>
</div>

<style>
.search-root { 
  position: relative; 
  font-size: 14px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 100;
}

.search-bar { 
  display: flex; 
  align-items: center; 
  gap: 0.75rem; 
  background: rgba(255,255,255,0.95); 
  border: 2px solid rgba(2,6,23,0.1); 
  border-radius: 50px; 
  padding: 0.65rem 1rem; 
  box-shadow: 
    0 2px 8px rgba(2,6,23,0.06),
    0 1px 2px rgba(2,6,23,0.04);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
  width: 40px;
  height: 40px;
  cursor: pointer;
}

/* Compact state - desktop only */
@media (min-width: 769px) {
  .search-bar {
    justify-content: center;
  }
  
  .search-input {
    width: 0;
    opacity: 0;
    padding: 0;
  }
  
  .clear-btn {
    opacity: 0;
    transform: scale(0);
  }
  
  /* Expanded state on hover/focus */
  .search-root:hover .search-bar,
  .search-root:focus-within .search-bar {
    width: 320px;
    cursor: text;
  }
  
  .search-root:hover .search-input,
  .search-root:focus-within .search-input {
    width: auto;
    flex: 1;
    opacity: 1;
    padding: 0.3rem 0;
  }
  
  .search-root:hover .clear-btn:not([hidden]),
  .search-root:focus-within .clear-btn:not([hidden]) {
    opacity: 1;
    transform: scale(1);
  }
  
  /* Fix results positioning for desktop */
  .search-root:hover .results,
  .search-root:focus-within .results {
    width: 320px;
  }
}

/* Mobile - always expanded */
@media (max-width: 768px) {
  .search-bar {
    width: 100%;
    min-width: 250px;
  }
}

.search-bar::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg, 
    transparent, 
    rgba(var(--accent-rgb, 2, 6, 23), 0.1), 
    transparent
  );
  transition: left 0.6s ease;
  pointer-events: none;
}

.search-root:focus-within .search-bar { 
  border-color: var(--accent); 
  box-shadow: 
    0 4px 20px rgba(2,6,23,0.12),
    0 2px 8px rgba(var(--accent-rgb, 2, 6, 23), 0.15);
  transform: translateY(-1px);
}

.search-root:focus-within .search-bar::before {
  left: 100%;
}

.search-input { 
  font: inherit; 
  font-size: 15px;
  border: 0; 
  background: transparent; 
  outline: none; 
  color: inherit; 
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  flex: 1;
  padding: 0.3rem 0;
}

.search-input::placeholder { 
  color: rgba(2,6,23,0.5); 
  transition: color 0.2s ease;
}

.search-input:focus::placeholder {
  color: rgba(2,6,23,0.3);
}

.loop { 
  opacity: 0.6; 
  transition: all 0.3s ease;
  color: var(--text-color);
  flex-shrink: 0;
}

.search-root:hover .loop,
.search-root:focus-within .loop {
  opacity: 0.9;
  color: var(--accent);
  transform: scale(1.1);
}

.clear-btn { 
  background: transparent; 
  border: 0; 
  color: rgba(2,6,23,0.5); 
  font-size: 1.25rem; 
  cursor: pointer; 
  padding: 0.2rem 0.3rem; 
  border-radius: 50%; 
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  flex-shrink: 0;
  opacity: 0;
  transform: scale(0.8);
}

.clear-btn:not([hidden]) {
  opacity: 1;
  transform: scale(1);
}

.clear-btn:hover { 
  background: rgba(2,6,23,0.08); 
  color: rgba(2,6,23,0.8);
  transform: scale(1.1);
}

.results { 
  position: absolute; 
  left: 0; 
  right: 0; 
  top: calc(100% + 12px); 
  background: rgba(255,255,255,0.98); 
  border: 1px solid rgba(2,6,23,0.1); 
  border-radius: 16px; 
  overflow: hidden; 
  box-shadow: 
    0 20px 40px rgba(2,6,23,0.15),
    0 8px 20px rgba(2,6,23,0.08);
  z-index: 9999;
  backdrop-filter: blur(20px);
  opacity: 0;
  transform: translateY(-8px) scale(0.95);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  min-width: 320px;
  max-height: 400px;
  overflow-y: auto;
}

.results:not([hidden]) {
  opacity: 1;
  transform: translateY(0) scale(1);
  pointer-events: auto;
}

.result-item { 
  padding: 1rem; 
  display: flex; 
  gap: 1rem; 
  align-items: center; 
  border-bottom: 1px solid rgba(2,6,23,0.05); 
  text-decoration: none; 
  color: inherit; 
  transition: all 0.2s ease;
  position: relative;
}

.result-item::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: var(--accent);
  transform: scaleY(0);
  transition: transform 0.2s ease;
}

.result-item:last-child { 
  border-bottom: none; 
}

.result-item:hover { 
  background: rgba(2,6,23,0.03); 
  transform: translateX(4px);
}

.result-item:hover::before {
  transform: scaleY(1);
}

.result-item img { 
  width: 70px; 
  height: 48px; 
  object-fit: cover; 
  border-radius: 12px; 
  background: #f8fafc; 
  transition: transform 0.2s ease;
  box-shadow: 0 2px 8px rgba(2,6,23,0.08);
}

.result-item:hover img {
  transform: scale(1.05);
}

.result-item .meta { 
  display: flex; 
  flex-direction: column; 
  gap: 4px; 
  flex: 1;
}

.result-item .title { 
  font-weight: 600; 
  margin: 0; 
  font-size: 0.9rem; 
  line-height: 1.3; 
  color: var(--text-color);
}

.result-item .date { 
  font-size: 0.75rem; 
  font-weight: 500; 
  color: rgba(2,6,23,0.6); 
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.result-item .date::before {
  content: 'ðŸ“…';
  font-size: 0.7rem;
}

/* Search icon pulse animation when compact */
@media (min-width: 769px) {
  .search-bar:not(:hover):not(:focus-within) .loop {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }
}

/* Dark mode */
html.dark .search-bar { 
  background: rgba(15,20,25,0.9); 
  border-color: rgba(255,255,255,0.12); 
  color: #e2e8f0;
}

html.dark .search-bar::before {
  background: linear-gradient(
    90deg, 
    transparent, 
    rgba(255,255,255,0.08), 
    transparent
  );
}

html.dark .search-root:focus-within .search-bar { 
  border-color: var(--accent); 
  box-shadow: 
    0 4px 20px rgba(0,0,0,0.3),
    0 2px 8px rgba(var(--accent-rgb, 59, 130, 246), 0.2);
}

html.dark .search-input::placeholder { 
  color: rgba(255,255,255,0.4); 
}

html.dark .search-input:focus::placeholder {
  color: rgba(255,255,255,0.25);
}

html.dark .loop {
  color: #94a3b8;
}

html.dark .search-root:hover .loop,
html.dark .search-root:focus-within .loop {
  color: var(--accent);
}

html.dark .clear-btn { 
  color: rgba(255,255,255,0.5); 
}

html.dark .clear-btn:hover { 
  background: rgba(255,255,255,0.08); 
  color: rgba(255,255,255,0.8);
}

html.dark .results { 
  background: rgba(15,20,25,0.95); 
  border-color: rgba(255,255,255,0.08); 
  box-shadow: 
    0 20px 40px rgba(0,0,0,0.4),
    0 8px 20px rgba(0,0,0,0.2);
}

html.dark .result-item { 
  border-bottom-color: rgba(255,255,255,0.05); 
  color: #e2e8f0;
}

html.dark .result-item:hover { 
  background: rgba(255,255,255,0.05); 
}

html.dark .result-item .title {
  color: #f1f5f9;
}

html.dark .result-item .date { 
  color: rgba(255,255,255,0.5); 
}

html.dark .result-item img { 
  background: #1e293b; 
}
</style>
</style>

<script type="module">
const root = document.querySelector('.search-root');
const input = root?.querySelector('.search-input');
const results = root?.querySelector('.results');
const clearBtn = root?.querySelector('.clear-btn');
let posts = [];
let timer = null;

const turkishMonths = {
  1: 'ocak', 2: 'ÅŸubat', 3: 'mart', 4: 'nisan', 
  5: 'mayÄ±s', 6: 'haziran', 7: 'temmuz', 8: 'aÄŸustos',
  9: 'eylÃ¼l', 10: 'ekim', 11: 'kasÄ±m', 12: 'aralÄ±k'
};

async function loadPosts() { 
  if (posts.length) return; 
  try { 
    const res = await fetch('/api/posts.json'); 
    posts = await res.json(); 
  } catch (error) { 
    console.error('Error loading posts:', error);
    posts = []; 
  } 
}

function dateFmt(d) { 
  try { 
    const date = new Date(d);
    const day = date.getDate();
    const month = turkishMonths[date.getMonth() + 1];
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
  } catch { 
    return d; 
  } 
}

function tpl(p) { 
  return `<a class="result-item" href="/${p.slug}/">
    ${p.heroImage ? `<img src="${p.heroImage}" alt="" loading="lazy"/>` : ''}
    <div class="meta">
      <div class="title">${p.title}</div>
      <div class="date">${dateFmt(p.pubDate)}</div>
    </div>
  </a>`; 
}

function search(q) { 
  if (!q) return []; 
  const qq = q.trim().toLowerCase(); 
  return posts.filter(p => 
    (p.title || '').toLowerCase().includes(qq) || 
    (p.description || '').toLowerCase().includes(qq)
  ).slice(0, 5); 
}

function render(list) { 
  if (!results) return; 
  if (!list.length) { 
    results.hidden = true; 
    results.innerHTML = ''; 
    return; 
  } 
  results.hidden = false; 
  results.innerHTML = list.map(tpl).join(''); 
}

function clear() { 
  if (!input || !clearBtn) return; 
  input.value = ''; 
  clearBtn.hidden = true; 
  render([]); 
}

input?.addEventListener('input', () => { 
  if (!input) return; 
  if (timer) clearTimeout(timer); 
  clearBtn && (clearBtn.hidden = input.value.length === 0); 
  timer = window.setTimeout(() => { 
    render(search(input.value)); 
  }, 200); 
});

input?.addEventListener('focus', () => { 
  loadPosts(); 
  if (input.value) render(search(input.value)); 
});

clearBtn?.addEventListener('click', () => { 
  clear(); 
  input?.focus(); 
});

document.addEventListener('keydown', (e) => { 
  if (e.key === '/' && document.activeElement !== input) { 
    input?.focus(); 
    e.preventDefault(); 
  } 
});

document.addEventListener('click', e => { 
  if (!root?.contains(e.target)) { 
    render([]); 
  } 
});
</script>
