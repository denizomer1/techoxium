<div class="search-root">
  <div class="search-bar">
    <svg class="loop" width="18" height="18" viewBox="0 0 24 24" aria-hidden="true">
      <circle cx="11" cy="11" r="7" stroke="currentColor" stroke-width="2" fill="none"/>
      <line x1="16.65" y1="16.65" x2="22" y2="22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
    <input class="search-input" type="search" placeholder="Ara..." aria-label="Search posts" autocomplete="off" />
    <button class="clear-btn" type="button" aria-label="Clear search" hidden>&times;</button>
  </div>
  <div class="results" role="listbox" aria-label="Search results" hidden></div>
</div>

<style>
.search-root { 
  position: relative; 
  max-width: 300px; 
  font-size: 14px; 
}

.search-bar { 
  display: flex; 
  align-items: center; 
  gap: 0.5rem; 
  background: rgba(255,255,255,0.9); 
  border: 1px solid rgba(2,6,23,0.12); 
  border-radius: 12px; 
  padding: 0.45rem; 
  box-shadow: 0 2px 6px rgba(2,6,23,0.08);
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-root:focus-within .search-bar { 
  border-color: var(--accent); 
  box-shadow: 0 4px 12px rgba(2,6,23,0.12);
}

.search-input { 
  flex: 1; 
  font: inherit; 
  border: 0; 
  background: transparent; 
  outline: none; 
  padding: 0.2rem 0; 
  color: inherit; 
}

.search-input::placeholder { 
  color: rgba(2,6,23,0.45); 
}

.loop { 
  opacity: 0.55; 
}

.clear-btn { 
  background: transparent; 
  border: 0; 
  color: rgba(2,6,23,0.55); 
  font-size: 1.15rem; 
  cursor: pointer; 
  padding: 0.15rem 0.25rem; 
  border-radius: 6px; 
}

.clear-btn:hover { 
  background: rgba(2,6,23,0.06); 
}

.results { 
  position: absolute; 
  left: 0; 
  right: 0; 
  top: calc(100% + 8px); 
  background: rgba(255,255,255,0.95); 
  border: 1px solid rgba(2,6,23,0.12); 
  border-radius: 12px; 
  overflow: hidden; 
  box-shadow: 0 10px 25px rgba(2,6,23,0.15);
  z-index: 10;
}

.result-item { 
  padding: 0.75rem; 
  display: flex; 
  gap: 0.75rem; 
  align-items: center; 
  border-bottom: 1px solid rgba(2,6,23,0.06); 
  text-decoration: none; 
  color: inherit; 
  transition: background 0.2s;
}

.result-item:last-child { 
  border-bottom: none; 
}

.result-item:hover { 
  background: rgba(2,6,23,0.04); 
}

.result-item img { 
  width: 60px; 
  height: 40px; 
  object-fit: cover; 
  border-radius: 8px; 
  background: #eceff3; 
}

.result-item .meta { 
  display: flex; 
  flex-direction: column; 
  gap: 2px; 
}

.result-item .title { 
  font-weight: 600; 
  margin: 0; 
  font-size: 0.85rem; 
  line-height: 1.2; 
}

.result-item .date { 
  font-size: 0.7rem; 
  font-weight: 500; 
  text-transform: uppercase; 
  color: rgba(2,6,23,0.55); 
}

/* Dark mode */
body.dark .search-bar { 
  background: rgba(18,22,28,0.8); 
  border-color: rgba(255,255,255,0.1); 
}

body.dark .search-input::placeholder { 
  color: rgba(255,255,255,0.45); 
}

body.dark .clear-btn { 
  color: rgba(255,255,255,0.6); 
}

body.dark .clear-btn:hover { 
  background: rgba(255,255,255,0.08); 
}

body.dark .results { 
  background: rgba(18,22,28,0.9); 
  border-color: rgba(255,255,255,0.08); 
}

body.dark .result-item { 
  border-bottom-color: rgba(255,255,255,0.06); 
}

body.dark .result-item:hover { 
  background: rgba(255,255,255,0.06); 
}

body.dark .result-item .date { 
  color: rgba(255,255,255,0.5); 
}

body.dark .result-item img { 
  background: #14191f; 
}

@media (max-width: 520px) { 
  .search-root { 
    max-width: 100%; 
  } 
}
</style>

<script type="module">
const root = document.querySelector('.search-root');
const input = root?.querySelector('.search-input');
const results = root?.querySelector('.results');
const clearBtn = root?.querySelector('.clear-btn');
let posts = [];
let timer = null;

async function loadPosts() { 
  if (posts.length) return; 
  try { 
    const res = await fetch('/api/posts.json'); 
    posts = await res.json(); 
  } catch { 
    posts = []; 
  } 
}

function dateFmt(d) { 
  try { 
    return new Date(d).toLocaleDateString(); 
  } catch { 
    return d; 
  } 
}

function tpl(p) { 
  return `<a class="result-item" href="/${p.slug}/">
    ${p.heroImage ? `<img src="${p.heroImage}" alt="" loading="lazy"/>` : ''}
    <div class="meta">
      <div class="title">${p.title}</div>
      <div class="date">${dateFmt(p.pubDate)}</div>
    </div>
  </a>`; 
}

function search(q) { 
  if (!q) return []; 
  const qq = q.trim().toLowerCase(); 
  return posts.filter(p => 
    (p.title || '').toLowerCase().includes(qq) || 
    (p.description || '').toLowerCase().includes(qq)
  ).slice(0, 5); 
}

function render(list) { 
  if (!results) return; 
  if (!list.length) { 
    results.hidden = true; 
    results.innerHTML = ''; 
    return; 
  } 
  results.hidden = false; 
  results.innerHTML = list.map(tpl).join(''); 
}

function clear() { 
  if (!input || !clearBtn) return; 
  input.value = ''; 
  clearBtn.hidden = true; 
  render([]); 
}

input?.addEventListener('input', () => { 
  if (!input) return; 
  if (timer) clearTimeout(timer); 
  clearBtn && (clearBtn.hidden = input.value.length === 0); 
  timer = window.setTimeout(() => { 
    render(search(input.value)); 
  }, 150); 
});

input?.addEventListener('focus', () => { 
  loadPosts(); 
  if (input.value) render(search(input.value)); 
});

clearBtn?.addEventListener('click', () => { 
  clear(); 
  input?.focus(); 
});

document.addEventListener('keydown', (e) => { 
  if (e.key === '/' && document.activeElement !== input) { 
    input?.focus(); 
    e.preventDefault(); 
  } 
});

document.addEventListener('click', e => { 
  if (!root?.contains(e.target)) { 
    render([]); 
  } 
});
</script>
