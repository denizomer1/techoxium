---
interface Props {
  locale: string;
  currentPath?: string;
}

const { locale = 'tr', currentPath = '/' } = Astro.props;

// Slug mapping for blog posts with different slugs in different languages
const slugMap: Record<string, string> = {
  // All slugs are now the same, no mapping needed
};

// Generate alternate URLs
const getAlternateUrl = (targetLocale: string) => {
  const normalized = currentPath.startsWith('/') ? currentPath : `/${currentPath}`;
  if (targetLocale === 'tr') {
    // For Turkish
    if (normalized === '/' || normalized === '/en' || normalized === '/en/') return '/tr';
    if (normalized.startsWith('/en/')) return normalized.replace(/^\/en/, '/tr');
    return normalized.replace(/^\/tr/, '/tr'); // Already Turkish
  } else {
    // For English
    if (normalized === '/' || normalized === '/tr' || normalized === '/tr/') return '/en';
    if (normalized.startsWith('/tr/')) return normalized.replace(/^\/tr/, '/en');
    return normalized.replace(/^\/en/, '/en'); // Already English
  }
};
---

<div class="language-switcher">
  <div class="language-options">
    <a 
      href={getAlternateUrl('tr')} 
      class={`language-option ${locale === 'tr' ? 'active' : ''}`}
      title="TÃ¼rkÃ§e"
      data-lang="tr"
    >
      ðŸ‡¹ðŸ‡· TR
    </a>
    <a 
      href={getAlternateUrl('en')} 
      class={`language-option ${locale === 'en' ? 'active' : ''}`}
      title="English"
      data-lang="en"
    >
      ðŸ‡ºðŸ‡¸ EN
    </a>
  </div>
</div>

<style>
  .language-switcher {
    display: flex;
    align-items: center;
    font-size: 0.9rem;
  }
  
  .language-options {
    display: flex;
    gap: 0.5rem;
  }
  
  .language-option {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.4rem 0.75rem;
    border-radius: 0.5rem;
    text-decoration: none;
    color: white;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .language-option:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .language-option.active {
    background: var(--accent);
    color: white;
    font-weight: 600;
    border-color: var(--accent);
    box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.3);
  }
  
  .language-option.active:hover {
    background: var(--accent-dark);
    border-color: var(--accent-dark);
  }
  
  /* Light mode support */
  @media (prefers-color-scheme: light) {
    .language-option {
      color: rgb(var(--black));
      background: rgba(0, 0, 0, 0.05);
      border-color: rgba(0, 0, 0, 0.1);
    }
    
    .language-option:hover {
      background: rgba(0, 0, 0, 0.08);
      border-color: rgba(0, 0, 0, 0.15);
    }
    
    .language-option.active {
      background: var(--accent);
      color: white;
      border-color: var(--accent);
    }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .language-switcher {
      font-size: 0.8rem;
    }
    
    .language-option {
      padding: 0.3rem 0.6rem;
      font-size: 0.8rem;
    }
  }
</style>

<script is:inline>
  // Set language preference cookie when clicking language options
  document.addEventListener('DOMContentLoaded', function() {
    const languageOptions = document.querySelectorAll('.language-option');
    languageOptions.forEach(option => {
      option.addEventListener('click', function(event) {
        // Prevent the native anchor navigation and handle it programmatically
        event.preventDefault();

        // Prevent double clicks causing duplicate navigation or errors
        if (this.dataset.disabled === '1') return;

        // Determine language and target URL
        const lang = this.dataset.lang || (this.textContent.includes('TR') ? 'tr' : 'en');
        const target = this.getAttribute('href') || '/';

        // Set language cookie
        document.cookie = 'language=' + lang + '; path=/; max-age=31536000; SameSite=Lax';

        // Disable all language options briefly to avoid multiple handlers firing
        document.querySelectorAll('.language-option').forEach(el => el.dataset.disabled = '1');
        setTimeout(() => { document.querySelectorAll('.language-option').forEach(el => el.dataset.disabled = '0'); }, 1000);

        // Navigate programmatically; normalize any duplicate /en prefixes
        let normalized = target || '/';
        if (!normalized.startsWith('/')) normalized = '/' + normalized;
        // Collapse any repeated /en segments like /en/en or /en/en/en
        normalized = normalized.replace(/(?:\/en)+/g, '/en');
        // If normalized ends up as '/en/' keep single trailing slash
        if (normalized === '/en/') normalized = '/en';
        location.assign(normalized);
      });
    });
  });
</script>
