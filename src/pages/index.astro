---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()).slice(0, 6);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main{max-width:1100px;margin:0 auto;padding:1rem}
			.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:1rem}
			/* initial state: no animation until the grid is visible */
			.card{background:transparent;border-radius:10px;padding:.5rem;opacity:0;transform:translateY(12px)}
			.card img{width:100%;height:auto;border-radius:8px}
			.card h3{margin:.5rem 0 0;color:rgb(var(--black))}
			.card p{margin:.25rem 0;color:rgb(var(--gray))}

			@keyframes card-in{from{opacity:0;transform:translateY(12px)}to{opacity:1;transform:translateY(0)}}
			/* animate when parent grid receives .in-view */
			.grid.in-view .card{animation:card-in .52s ease forwards;animation-delay:var(--i,0s)}

			/* reduced motion preference */
			@media (prefers-reduced-motion: reduce){
				.card{animation:none;opacity:1;transform:none}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<h1>Son YazÄ±lar</h1>
			<div class="grid">
				{posts.map((post, i) => (
					<article class="card" style={`--i: ${i * 0.08}s`}>
						<a href={`/blog/${post.id}/`}>
							{post.data.heroImage && <img src={post.data.heroImage} alt="" width="720" height="360" />}
							<h3>{post.data.title}</h3>
							<p><FormattedDate date={post.data.pubDate} /></p>
						</a>
					</article>
				))}
			</div>
		</main>
		<Footer />
		<script type="module">
			// lazy-trigger animations when the grid scrolls into view
			if (typeof window !== 'undefined') {
				const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
				const grid = document.querySelector('.grid');
				if (!grid) return;
				if (prefersReduced) {
					grid.classList.add('in-view');
				} else if ('IntersectionObserver' in window) {
					const io = new IntersectionObserver((entries, obs) => {
						entries.forEach(e => {
							if (e.isIntersecting) {
								grid.classList.add('in-view');
								obs.disconnect();
							}
						});
					}, {threshold: 0.12, rootMargin: '0px 0px -8% 0px'});
					io.observe(grid);
				} else {
					// fallback: trigger immediately
					grid.classList.add('in-view');
				}
			}
		</script>
	</body>
</html>
