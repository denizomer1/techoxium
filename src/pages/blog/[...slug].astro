---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import { resolveEnv } from '../../lib/env';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({ params: { slug: post.slug ?? post.id }, props: post }));
}

type Props = CollectionEntry<'blog'>;

let post = Astro.props as any;
// Runtime override: if KV has edited markdown, render that instead (fallback to static)
let Content: any;
try {
	// Access Cloudflare env via locals
		const env: any = resolveEnv(Astro.locals);
	if(env?.BLOG_DATA){
		const key = `post:${post.id}`;
		const override = await env.BLOG_DATA.get(key);
		if(override){
			// Parse minimal frontmatter? For now treat as pure markdown body.
			const md = await render({ id: post.id, slug: post.slug, body: override } as any);
			Content = md.Content;
		}
	}
} catch {}
if(!Content){
	const rendered = await render(post);
	Content = rendered.Content;
}
---

<BlogPost {...post.data}>
	<Content />
</BlogPost>
